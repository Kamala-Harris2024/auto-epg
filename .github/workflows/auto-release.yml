name: Create Guide XML and Release

on:
  schedule:
    - cron: '30 2 * * *'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up WireGuard Connection
      uses: niklaskeerl/easy-wireguard-action@v2
      with:
        WG_CONFIG_FILE: ${{ secrets.WG_CONFIG_FILE }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        pip install requests
        pip install lxml

    - name: Run Python script to generate XML
      run: python generate_channels.py

    - name: Setup MSVC environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: NPM install
      run: npm install

    - name: Count XML files
      id: count_files
      run: |
        file_count=$(ls channels/*.xml | wc -l)
        echo "count=$file_count" >> $GITHUB_OUTPUT
  
    - name: Create guides directory
      run: mkdir -p guides      
  
    - name: Generate guides
      run: |
        for i in $(seq 1 ${{ steps.count_files.outputs.count }}); do
          npm run grab -- --channels=channels/channels_$i.xml --days=3 --output=guides/guide_$i.xml --maxConnections=3
        done

    - name: Run Python script to generate full EPG
      run: python full_EPG.py
    
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: binary
        path: guide.xml.gz

    - name: Set release date
      run: echo "RELEASE_DATE=$(date +%m-%d-%Y)" >> $GITHUB_ENV

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        name: binary

    - name: Delete Existing Release
      id: delete_release
      uses: actions/github-script@v6
      with:
        script: |
          const owner = context.repo.owner;
          const repo = context.repo.repo;
          const tag = "xml";
    
          // List all releases and find the release by tag
          const releases = await github.rest.repos.listReleases({
            owner: owner,
            repo: repo,
          });
    
          const release = releases.data.find(release => release.tag_name === tag);
    
          // Check if the release exists and delete it
          if (release) {
            await github.rest.repos.deleteRelease({
              owner: owner,
              repo: repo,
              release_id: release.id,
            });
            console.log(`Deleted release with ID ${release.id}`);
          } else {
            console.log("No existing release to delete");
          }
    
          // Delete the tag
          try {
            await github.rest.git.deleteRef({
              owner: owner,
              repo: repo,
              ref: `tags/${tag}`,
            });
            console.log(`Deleted tag ${tag}`);
          } catch (error) {
            console.error(`Error deleting tag: ${error.message}`);
          }

    - name: Echo build sha256
      id: build_sha
      run: |
        if command -v sha256sum >/dev/null 2>&1; then
          sha256sum guide.xml.gz > sha256.checksum
        elif command -v shasum >/dev/null 2>&1; then
          shasum -a 256 guide.xml.gz > sha256.checksum
        else
          echo "SHA256 checksum tool not found"
          exit 1
        fi
        echo "build_sha=$(cat sha256.checksum)" >> $GITHUB_OUTPUT
        cat sha256.checksum
        
    - name: Guide Release
      uses: softprops/action-gh-release@v2.0.8
      with:
        name: TV Guide ${{ env.RELEASE_DATE }}
        tag_name: xml
        body: |
          **This release has been built by Github Actions**
          [Link to build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          Build SHA256:
          ```
          ${{ steps.build_sha.outputs.build_sha }}
          ```
          To verify the build SHA256 during the action, click the build link, go-to "Create Release", open the Echo build sha256 step and read the sha256.
          You can download the build artifacts, generate a SHA256 checksum and compare it with the below binary.
        files: guide.xml.gz
        draft: false

    - name: Install GitHub CLI
      run: |
        sudo apt-get update
        sudo apt-get install -y gh

    - name: Find Draft Release
      id: find_draft_release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        release=$(gh release list --json tagName,isDraft --jq '.[] | select(.isDraft) | .tagName' --limit 1)
        if [ -z "$release" ]; then
          echo "No draft release found."
          echo "release_tag=" >> $GITHUB_ENV
        else
          echo "Draft release found: $release"
          echo "release_tag=$release" >> $GITHUB_ENV
        fi

    - name: Publish Draft Release
      if: env.release_tag != ''
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release edit ${{ env.release_tag }} --draft=false
